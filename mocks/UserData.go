// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "cleanarch/domain"
	"cleanarch/feature/user"

	mock "github.com/stretchr/testify/mock"
)


type UserData struct {
	mock.Mock
}

func (_m *UserData) Insert(newUser domain.User) domain.User {
	ret := _m.Called(newUser)

	var r0 domain.User
	if rf, ok := ret.Get(0).(func(domain.User) domain.User); ok {
		r0 = rf(newUser)
	} else {
		r0 = ret.Get(0).(domain.User)
	}

	return r0
}

func (_m *UserData) GetSpecific(userID int) (domain.User, error) {
	ret := _m.Called(userID)

	var r0 domain.User
	if rf, ok := ret.Get(0).(func(int) domain.User); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(domain.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

func (_m *UserData) LoginUserData(authData user.LoginModel) (token, name string, err error) {
	ret := _m.Called(authData)

	var r0 string
	if rf, ok := ret.Get(0).(func(user.LoginModel) string); ok {
		r0 = rf(authData)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(user.LoginModel) string); ok {
		r1 = rf(authData)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(user.LoginModel) error); ok {
		r2 = rf(authData)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}


func (_m *UserData) DeleteData(userID int) (row int, err error) {
	ret := _m.Called(userID)

	var r0 int
	if rf, ok := ret.Get(0).(func(int) int); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

//UpdateData provide a mock function
func (_m *UserData) UpdateData(data map[string]interface{}, idUser int) (row int, err error) {
	ret := _m.Called(data, idUser)

	var r0 int
	if rf, ok := ret.Get(0).(func(map[string]interface{}, int) int); ok {
		r0 = rf(data, idUser)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(map[string]interface{}, int) error); ok {
		r1 = rf(data, idUser)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: newUser

type mockConstructorTestingTNewUserData interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserData creates a new instance of UserData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserData(t mockConstructorTestingTNewUserData) *UserData {
	mock := &UserData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
